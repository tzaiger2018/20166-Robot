// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team6121.robot.subsystems;


import org.usfirst.frc.team6121.robot.RobotMap;
import org.usfirst.frc.team6121.robot.commands.ArcadeDrive;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController rFMotor = RobotMap.chassisRFMotor;
    private final SpeedController rRMotor = RobotMap.chassisRRMotor;
    private final SpeedController lFMotor = RobotMap.chassisLFMotor;
    private final SpeedController lRMotor = RobotMap.chassisLRMotor;
    private final RobotDrive robotDrive4X = RobotMap.chassisRobotDrive4X;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    double a = 0.5;
    double b = 1.0;
    double fwd = 0;
	double rcw = 0;
	double left = 0;
	double right = 0;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	
    	setDefaultCommand(new ArcadeDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
public void arcadeDrive(Joystick stick)   {
       	
		fwd = -(stick.getRawAxis(1)*(stick.getRawAxis(3)+0.5));
		rcw = stick.getRawAxis(0)*(stick.getRawAxis(3)+0.5);
    	
    	//quadrant 1
    	if (fwd>=0) {
    		 if (rcw>=0)  {
    			 left = RobotMap.leftCalc(fwd, rcw, a, b);
    			 right = RobotMap.rightCalc(fwd, rcw, a, b);
    		 }
    	//quadrant 2
    		 else   {
    			 left = RobotMap.rightCalc(fwd, -rcw, a, b);
    			 right = RobotMap.leftCalc(fwd, -rcw, a, b);
    		 }
    	}
    	//quadrant 4
    	else  {
    		if (rcw>=0)   {
    			left = -(RobotMap.rightCalc(-fwd, -rcw, a, b));
    			right = -(RobotMap.leftCalc(-fwd, -rcw, a, b));
    		}
    	
    	//quadrant 3
    		else   {
    			left = -(RobotMap.leftCalc(-fwd, rcw, a, b));
    			right = -(RobotMap.rightCalc(-fwd, rcw, a, b));
    		}  
    	}
    	
    	robotDrive4X.setLeftRightMotorOutputs(left,right);
    	
    }
    
    public void driveStraight(double speed)   {
    	robotDrive4X.setLeftRightMotorOutputs(speed, speed);
    }

}

